from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, HTMLResponse
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uvicorn
import json
import os

app = FastAPI(title="AI Gym Coach Mock API", version="1.0.0")

# CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram
def load_telegram_config():
    try:
        if os.path.exists("telegram_config.json"):
            with open("telegram_config.json", "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    return {}

telegram_config = load_telegram_config()

# Mock –¥–∞–Ω–Ω—ã–µ
mock_exercises = [
    {
        "id": 1,
        "name": "–û—Ç–∂–∏–º–∞–Ω–∏—è",
        "muscle_group": "–ì—Ä—É–¥—å",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞",
        "difficulty": "–°—Ä–µ–¥–Ω–∏–π",
        "equipment": "–ù–µ—Ç",
        "instructions": "–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞, –æ–ø—É—Å—Ç–∏—Ç–µ—Å—å –¥–æ –∫–∞—Å–∞–Ω–∏—è –≥—Ä—É–¥—å—é –ø–æ–ª–∞, –ø–æ–¥–Ω–∏–º–∏—Ç–µ—Å—å"
    },
    {
        "id": 2,
        "name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
        "muscle_group": "–ù–æ–≥–∏",
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
        "difficulty": "–õ–µ–≥–∫–∏–π",
        "equipment": "–ù–µ—Ç",
        "instructions": "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á, –ø—Ä–∏—Å—è–¥—å—Ç–µ –¥–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏ –±–µ–¥–µ—Ä —Å –ø–æ–ª–æ–º"
    },
    {
        "id": 3,
        "name": "–ü–ª–∞–Ω–∫–∞",
        "muscle_group": "–ö–æ—Ä",
        "description": "–°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ—Ä–∞",
        "difficulty": "–°—Ä–µ–¥–Ω–∏–π",
        "equipment": "–ù–µ—Ç",
        "instructions": "–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞ –Ω–∞ –ø—Ä–µ–¥–ø–ª–µ—á—å—è—Ö, –¥–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–æ –ø—Ä—è–º—ã–º"
    }
]

mock_workouts = [
    {
        "id": 1,
        "name": "–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞",
        "type": "–ö–∞—Ä–¥–∏–æ",
        "duration": 15,
        "difficulty": "–õ–µ–≥–∫–∏–π",
        "exercises": [
            {
                "exercise": mock_exercises[0],
                "sets": 3,
                "reps": 10,
                "rest_time": 60
            },
            {
                "exercise": mock_exercises[1],
                "sets": 3,
                "reps": 15,
                "rest_time": 60
            }
        ]
    }
]

mock_users = [
    {
        "id": 1,
        "telegram_id": 123456789,
        "username": "testuser",
        "first_name": "Test",
        "last_name": "User",
        "level": "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
        "total_workouts": 5,
        "total_exercises": 25
    }
]

# Pydantic –º–æ–¥–µ–ª–∏
class Exercise(BaseModel):
    id: int
    name: str
    muscle_group: str
    description: str
    difficulty: str
    equipment: str
    instructions: str

class WorkoutExercise(BaseModel):
    exercise: Exercise
    sets: int
    reps: int
    rest_time: int

class Workout(BaseModel):
    id: int
    name: str
    type: str
    duration: int
    difficulty: str
    exercises: List[WorkoutExercise]

class User(BaseModel):
    id: int
    telegram_id: int
    username: str
    first_name: str
    last_name: str
    level: str
    total_workouts: int
    total_exercises: int

class TelegramUpdate(BaseModel):
    update_id: int
    message: Optional[Dict[str, Any]] = None
    callback_query: Optional[Dict[str, Any]] = None

# Telegram Bot API —Ñ—É–Ω–∫—Ü–∏–∏
def send_telegram_message(chat_id: int, text: str, reply_markup: Optional[Dict] = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not telegram_config.get("bot_token"):
        print(f"–ë–æ—Ç —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        return
    
    url = f"https://api.telegram.org/bot{telegram_config['bot_token']}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    try:
        import requests
        response = requests.post(url, json=data, timeout=10)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def create_inline_keyboard(buttons: List[List[Dict[str, str]]]) -> Dict[str, List]:
    """–°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return {
        "inline_keyboard": buttons
    }

# API endpoints
@app.get("/")
async def root():
    return {"message": "AI Gym Coach Mock API", "version": "1.0.0"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "mock-api"}

@app.get("/api/v1/users/", response_model=List[User])
async def get_users():
    return mock_users

@app.post("/api/v1/users/", response_model=User)
async def create_user(user: User):
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return mock_users[0]

@app.get("/api/v1/users/{user_id}", response_model=User)
async def get_user(user_id: int):
    if user_id == 1:
        return mock_users[0]
    raise HTTPException(status_code=404, detail="User not found")

@app.get("/api/v1/workouts/exercises/", response_model=List[Exercise])
async def get_exercises():
    return mock_exercises

@app.get("/api/v1/workouts/", response_model=List[Workout])
async def get_workouts():
    return mock_workouts

@app.post("/api/v1/workouts/generate/", response_model=Workout)
async def generate_workout():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    return mock_workouts[0]

@app.get("/api/v1/workouts/{workout_id}", response_model=Workout)
async def get_workout(workout_id: int):
    if workout_id == 1:
        return mock_workouts[0]
    raise HTTPException(status_code=404, detail="Workout not found")

@app.post("/api/v1/workouts/{workout_id}/start")
async def start_workout(workout_id: int):
    return {"message": f"Workout {workout_id} started", "status": "active"}

@app.post("/api/v1/workouts/{workout_id}/complete")
async def complete_workout(workout_id: int):
    return {"message": f"Workout {workout_id} completed", "status": "completed"}

# Telegram webhook endpoint
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = TelegramUpdate(**data)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if update.message:
            message = update.message
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            if text == "/start":
                welcome_text = """
ü§ñ <b>AI Gym Coach</b> - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫!

üí™ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫

üì± <b>–û—Ç–∫—Ä–æ–π—Ç–µ Mini App</b> –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
                """
                
                keyboard = create_inline_keyboard([
                    [{"text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "web_app": {"url": telegram_config.get("frontend_url", "http://localhost:3000")}}],
                    [{"text": "üí™ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "callback_data": "generate_workout"}],
                    [{"text": "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "show_stats"}]
                ])
                
                send_telegram_message(chat_id, welcome_text, keyboard)
                
            elif text == "/help":
                help_text = """
üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/app - –û—Ç–∫—Ä—ã—Ç—å Mini App
/generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
                """
                send_telegram_message(chat_id, help_text)
                
            elif text == "/app":
                keyboard = create_inline_keyboard([
                    [{"text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å AI Gym Coach", "web_app": {"url": telegram_config.get("frontend_url", "http://localhost:3000")}}]
                ])
                send_telegram_message(chat_id, "üì± –û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!", keyboard)
                
            elif text == "/generate":
                workout = mock_workouts[0]
                workout_text = f"""
üí™ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b>

üèÉ‚Äç‚ôÇÔ∏è <b>{workout['name']}</b>
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {workout['duration']} –º–∏–Ω
üéØ –¢–∏–ø: {workout['type']}
üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {workout['difficulty']}

<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>
"""
                for i, exercise_data in enumerate(workout['exercises'], 1):
                    exercise = exercise_data['exercise']
                    workout_text += f"{i}. <b>{exercise['name']}</b> - {exercise_data['sets']}x{exercise_data['reps']}\n"
                
                keyboard = create_inline_keyboard([
                    [{"text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "web_app": {"url": telegram_config.get("frontend_url", "http://localhost:3000")}}],
                    [{"text": "üí™ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "callback_data": "start_workout"}]
                ])
                
                send_telegram_message(chat_id, workout_text, keyboard)
                
            elif text == "/stats":
                user = mock_users[0]
                stats_text = f"""
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

üë§ <b>{user['first_name']} {user['last_name']}</b>
üèÜ –£—Ä–æ–≤–µ–Ω—å: {user['level']}
üí™ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {user['total_workouts']}
üéØ –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {user['total_exercises']}

üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
‚Ä¢ –ù–µ–¥–µ–ª—è: +3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –ú–µ—Å—è—Ü: +12 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –ì–æ–¥: +45 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                """
                
                keyboard = create_inline_keyboard([
                    [{"text": "üì± –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "web_app": {"url": telegram_config.get("frontend_url", "http://localhost:3000")}}],
                    [{"text": "üéØ –ù–æ–≤—ã–µ —Ü–µ–ª–∏", "callback_data": "set_goals"}]
                ])
                
                send_telegram_message(chat_id, stats_text, keyboard)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
        elif update.callback_query:
            callback_query = update.callback_query
            chat_id = callback_query["message"]["chat"]["id"]
            data = callback_query.get("data", "")
            
            if data == "generate_workout":
                workout = mock_workouts[0]
                workout_text = f"üí™ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b>\n\nüèÉ‚Äç‚ôÇÔ∏è {workout['name']}\n‚è±Ô∏è {workout['duration']} –º–∏–Ω"
                keyboard = create_inline_keyboard([
                    [{"text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", "web_app": {"url": telegram_config.get("frontend_url", "http://localhost:3000")}}]
                ])
                send_telegram_message(chat_id, workout_text, keyboard)
                
            elif data == "show_stats":
                user = mock_users[0]
                stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\nüí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {user['total_workouts']}\nüéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {user['total_exercises']}"
                keyboard = create_inline_keyboard([
                    [{"text": "üì± –ü–æ–¥—Ä–æ–±–Ω–µ–µ", "web_app": {"url": telegram_config.get("frontend_url", "http://localhost:3000")}}]
                ])
                send_telegram_message(chat_id, stats_text, keyboard)
        
        return {"status": "ok"}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"status": "error", "message": str(e)}

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
@app.get("/app", response_class=HTMLResponse)
async def serve_frontend():
    """–°–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    return HTMLResponse("""
    <!DOCTYPE html>
    <html>
    <head>
        <title>AI Gym Coach</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="https://telegram.org/js/telegram-web-app.js"></script>
    </head>
    <body>
        <div id="root">
            <h1>AI Gym Coach</h1>
            <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</p>
        </div>
        <script>
            // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            window.location.href = 'http://localhost:3000';
        </script>
    </body>
    </html>
    """)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Mock API —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram...")
    print("üìç URL: http://localhost:8000")
    print("üìö API Docs: http://localhost:8000/docs")
    print("üîß Health Check: http://localhost:8000/health")
    print("ü§ñ Telegram Webhook: http://localhost:8000/webhook")
    
    if telegram_config:
        print(f"‚úÖ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print(f"   Bot: {telegram_config.get('bot_token', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')[:10]}...")
        print(f"   Webhook: {telegram_config.get('webhook_url', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}")
    else:
        print("‚ö†Ô∏è Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_telegram_bot.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    print("\n" + "="*50)
    
    uvicorn.run(
        "mock_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 