#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Telegram —Å localtunnel
"""

import subprocess
import time
import requests
import json
import os
import sys
from typing import Optional

class TelegramLocalRunner:
    def __init__(self):
        self.backend_process = None
        self.frontend_process = None
        self.tunnel_process = None
        self.tunnel_url = None
        
    def check_localtunnel(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ localtunnel"""
        try:
            result = subprocess.run(["lt", "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ localtunnel –Ω–∞–π–¥–µ–Ω")
                return True
        except FileNotFoundError:
            pass
        
        print("‚ùå localtunnel –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ localtunnel:")
        print("   npm install -g localtunnel")
        return False
    
    def start_backend(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å backend —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            self.backend_process = subprocess.Popen(
                [sys.executable, "backend/mock_server.py"],
                cwd=os.getcwd(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            try:
                response = requests.get("http://localhost:8000/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å backend: {e}")
            
            return self.backend_process.poll() is None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend: {e}")
            return False
    
    def start_frontend(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å frontend —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            self.frontend_process = subprocess.Popen(
                ["npm", "run", "dev"],
                cwd="frontend",
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            try:
                response = requests.get("http://localhost:3000", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Frontend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000")
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å frontend: {e}")
            
            return self.frontend_process.poll() is None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend: {e}")
            return False
    
    def start_tunnel(self) -> Optional[str]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å localtunnel —Ç—É–Ω–Ω–µ–ª—å"""
        if not self.check_localtunnel():
            return None
            
        print("üöÄ –ó–∞–ø—É—Å–∫ localtunnel —Ç—É–Ω–Ω–µ–ª—è...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º localtunnel –≤ —Ñ–æ–Ω–µ
            self.tunnel_process = subprocess.Popen(
                ["lt", "--port", "8000", "--subdomain", "aigym-coach"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º URL
            time.sleep(5)
            
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ localtunnel –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
            if self.tunnel_process.poll() is None:
                # localtunnel –æ–±—ã—á–Ω–æ –≤—ã–≤–æ–¥–∏—Ç URL –≤ stdout
                output = self.tunnel_process.stdout.readline() if self.tunnel_process.stdout else ""
                if "https://" in output:
                    self.tunnel_url = output.strip()
                    print(f"‚úÖ localtunnel –∑–∞–ø—É—â–µ–Ω: {self.tunnel_url}")
                    return self.tunnel_url
                else:
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API
                    try:
                        response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
                        if response.status_code == 200:
                            tunnels = response.json()["tunnels"]
                            for tunnel in tunnels:
                                if tunnel["proto"] == "https":
                                    self.tunnel_url = tunnel["public_url"]
                                    print(f"‚úÖ localtunnel –∑–∞–ø—É—â–µ–Ω: {self.tunnel_url}")
                                    return self.tunnel_url
                    except:
                        pass
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    self.tunnel_url = "https://aigym-coach.loca.lt"
                    print(f"‚úÖ localtunnel –∑–∞–ø—É—â–µ–Ω (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π URL): {self.tunnel_url}")
                    print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤ –≤—ã–≤–æ–¥–µ localtunnel")
                    return self.tunnel_url
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ localtunnel")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ localtunnel: {e}")
            return None
    
    def setup_telegram_bot(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram –±–æ—Ç–∞"""
        if not self.tunnel_url:
            print("‚ùå Tunnel URL –Ω–µ –ø–æ–ª—É—á–µ–Ω!")
            return False
            
        print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞...")
        print(f"üîó Backend URL: {self.tunnel_url}")
        print(f"üì± Frontend URL: {self.tunnel_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            "bot_token": "YOUR_BOT_TOKEN",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            "webhook_url": self.tunnel_url,
            "frontend_url": self.tunnel_url
        }
        
        with open("telegram_config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ telegram_config.json")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞: /newbot")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –≤ telegram_config.json")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ Mini App: /newapp")
        print("5. –£–∫–∞–∂–∏—Ç–µ URL: " + self.tunnel_url)
        print("6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä")
        
        return True
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\nüìä –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:")
        print("=" * 40)
        
        # backend
        if self.backend_process and self.backend_process.poll() is None:
            print("‚úÖ Backend: –ó–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 8000)")
        else:
            print("‚ùå Backend: –ù–µ –∑–∞–ø—É—â–µ–Ω")
        
        # frontend
        if self.frontend_process and self.frontend_process.poll() is None:
            print("‚úÖ Frontend: –ó–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 3000)")
        else:
            print("‚ùå Frontend: –ù–µ –∑–∞–ø—É—â–µ–Ω")
        
        # tunnel
        if self.tunnel_process and self.tunnel_process.poll() is None:
            print("‚úÖ localtunnel: –ó–∞–ø—É—â–µ–Ω")
            if self.tunnel_url:
                print(f"   URL: {self.tunnel_url}")
        else:
            print("‚ùå localtunnel: –ù–µ –∑–∞–ø—É—â–µ–Ω")
        
        print("\nüåê –î–û–°–¢–£–ü–ù–´–ï URL:")
        print(f"   Frontend: http://localhost:3000")
        print(f"   Backend: http://localhost:8000")
        if self.tunnel_url:
            print(f"   Public URL: {self.tunnel_url}")
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        if self.tunnel_process:
            self.tunnel_process.terminate()
            print("‚úÖ localtunnel –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.backend_process:
            self.backend_process.terminate()
            print("‚úÖ Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.frontend_process:
            self.frontend_process.terminate()
            print("‚úÖ Frontend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        print("üöÄ –ó–ê–ü–£–°–ö –í TELEGRAM –° LOCALTUNNEL")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º backend
            if not self.start_backend():
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º frontend
            if not self.start_frontend():
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º tunnel
            if not self.start_tunnel():
                print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ç—É–Ω–Ω–µ–ª—è (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
            if self.tunnel_url:
                self.setup_telegram_bot()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            self.show_status()
            
            print("\nüéâ –ó–ê–ü–£–°–ö –ó–ê–í–ï–†–®–ï–ù!")
            print("=" * 50)
            if self.tunnel_url:
                print("–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")
            else:
                print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                self.stop_all()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            self.stop_all()
            return False

def main():
    runner = TelegramLocalRunner()
    runner.run()

if __name__ == "__main__":
    main() 