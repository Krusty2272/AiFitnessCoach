#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Telegram
"""

import subprocess
import time
import requests
import json
import os
import sys
from typing import Optional

class TelegramDeployer:
    def __init__(self):
        self.ngrok_process = None
        self.backend_process = None
        self.frontend_process = None
        self.ngrok_url = None
        
    def check_ngrok(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ngrok"""
        try:
            result = subprocess.run(["ngrok", "version"], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ ngrok –Ω–∞–π–¥–µ–Ω")
                return True
        except FileNotFoundError:
            pass
        
        print("‚ùå ngrok –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok:")
        print("   1. –°–∫–∞—á–∞–π—Ç–µ —Å https://ngrok.com/download")
        print("   2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ –ø–∞–ø–∫—É PATH")
        print("   3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://ngrok.com")
        print("   4. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω: ngrok config add-authtoken YOUR_TOKEN")
        return False
    
    def start_ngrok(self, port: int = 8000) -> Optional[str]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å ngrok —Ç—É–Ω–Ω–µ–ª—å"""
        if not self.check_ngrok():
            return None
            
        print(f"üöÄ –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è –ø–æ—Ä—Ç–∞ {port}...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok –≤ —Ñ–æ–Ω–µ
            self.ngrok_process = subprocess.Popen(
                ["ngrok", "http", str(port), "--log=stdout"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º URL
            time.sleep(3)
            
            # –ü–æ–ª—É—á–∞–µ–º URL —á–µ—Ä–µ–∑ ngrok API
            try:
                response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
                if response.status_code == 200:
                    tunnels = response.json()["tunnels"]
                    for tunnel in tunnels:
                        if tunnel["proto"] == "https":
                            self.ngrok_url = tunnel["public_url"]
                            print(f"‚úÖ ngrok —Ç—É–Ω–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω: {self.ngrok_url}")
                            return self.ngrok_url
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL —á–µ—Ä–µ–∑ API: {e}")
                
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥
            time.sleep(2)
            if self.ngrok_process.poll() is None:
                print("‚úÖ ngrok –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:4040)")
                return "https://your-ngrok-url.ngrok.io"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: {e}")
            return None
    
    def start_backend(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å backend —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            self.backend_process = subprocess.Popen(
                [sys.executable, "backend/mock_server.py"],
                cwd=os.getcwd(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            try:
                response = requests.get("http://localhost:8000/health", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å backend: {e}")
            
            return self.backend_process.poll() is None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend: {e}")
            return False
    
    def start_frontend(self) -> bool:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å frontend —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ frontend —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            self.frontend_process = subprocess.Popen(
                ["npm", "run", "dev"],
                cwd="frontend",
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            try:
                response = requests.get("http://localhost:3000", timeout=5)
                if response.status_code == 200:
                    print("‚úÖ Frontend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å frontend: {e}")
            
            return self.frontend_process.poll() is None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ frontend: {e}")
            return False
    
    def setup_telegram_bot(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram –±–æ—Ç–∞"""
        if not self.ngrok_url:
            print("‚ùå ngrok URL –Ω–µ –ø–æ–ª—É—á–µ–Ω!")
            return False
            
        print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞...")
        print(f"üì± Frontend URL: {self.ngrok_url.replace('https://', 'https://')}")
        print(f"üîó Backend URL: {self.ngrok_url}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            "bot_token": "YOUR_BOT_TOKEN",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            "webhook_url": self.ngrok_url,
            "frontend_url": self.ngrok_url.replace("https://", "https://")
        }
        
        with open("telegram_config.json", "w", encoding="utf-8") as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞: /newbot")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∑–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –≤ telegram_config.json")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ Mini App: /newapp")
        print("5. –£–∫–∞–∂–∏—Ç–µ URL: " + self.ngrok_url)
        print("6. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä")
        
        return True
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\nüìä –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:")
        print("=" * 40)
        
        # ngrok
        if self.ngrok_process and self.ngrok_process.poll() is None:
            print("‚úÖ ngrok: –ó–∞–ø—É—â–µ–Ω")
            if self.ngrok_url:
                print(f"   URL: {self.ngrok_url}")
        else:
            print("‚ùå ngrok: –ù–µ –∑–∞–ø—É—â–µ–Ω")
        
        # backend
        if self.backend_process and self.backend_process.poll() is None:
            print("‚úÖ Backend: –ó–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 8000)")
        else:
            print("‚ùå Backend: –ù–µ –∑–∞–ø—É—â–µ–Ω")
        
        # frontend
        if self.frontend_process and self.frontend_process.poll() is None:
            print("‚úÖ Frontend: –ó–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 3000)")
        else:
            print("‚ùå Frontend: –ù–µ –∑–∞–ø—É—â–µ–Ω")
        
        print("\nüåê –î–û–°–¢–£–ü–ù–´–ï URL:")
        print(f"   Frontend: http://localhost:3000")
        print(f"   Backend: http://localhost:8000")
        print(f"   ngrok Dashboard: http://localhost:4040")
        if self.ngrok_url:
            print(f"   Public URL: {self.ngrok_url}")
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        if self.ngrok_process:
            self.ngrok_process.terminate()
            print("‚úÖ ngrok –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.backend_process:
            self.backend_process.terminate()
            print("‚úÖ Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if self.frontend_process:
            self.frontend_process.terminate()
            print("‚úÖ Frontend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
        print("üöÄ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –í TELEGRAM")
        print("=" * 50)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º ngrok
            if not self.start_ngrok():
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º backend
            if not self.start_backend():
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º frontend
            if not self.start_frontend():
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
            self.setup_telegram_bot()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            self.show_status()
            
            print("\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
            print("=" * 50)
            print("–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                self.stop_all()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}")
            self.stop_all()
            return False

def main():
    deployer = TelegramDeployer()
    deployer.run()

if __name__ == "__main__":
    main() 