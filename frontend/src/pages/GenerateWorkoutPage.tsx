import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardContent } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import aiService, { UserProfile, Workout } from '../services/aiService';
import { useUser } from '../hooks/useUser';

export const GenerateWorkoutPage: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useUser();
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [generatedWorkout, setGeneratedWorkout] = useState<Workout | null>(null);
  
  // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è AI
  const [profile, setProfile] = useState<UserProfile>({
    age: 25,
    weight: 70,
    height: 175,
    fitness_level: 'intermediate',
    goals: ['muscle_gain'],
    injuries: [],
    available_equipment: [],
    workout_duration: 45,
    days_per_week: 3
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ localStorage
  useEffect(() => {
    const savedProfile = localStorage.getItem('user_profile');
    if (savedProfile) {
      setProfile(JSON.parse(savedProfile));
    }
  }, []);

  const fitnessLevels = [
    { id: 'beginner', name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π', icon: 'üå±' },
    { id: 'intermediate', name: '–°—Ä–µ–¥–Ω–∏–π', icon: 'üí™' },
    { id: 'advanced', name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', icon: 'üèÜ' }
  ];

  const goals = [
    { id: 'muscle_gain', name: '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', icon: 'üí™' },
    { id: 'weight_loss', name: '–ü–æ—Ö—É–¥–µ–Ω–∏–µ', icon: 'üî•' },
    { id: 'strength', name: '–°–∏–ª–∞', icon: '‚ö°' },
    { id: 'endurance', name: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', icon: 'üèÉ' }
  ];

  const equipment = [
    { id: 'dumbbells', name: '–ì–∞–Ω—Ç–µ–ª–∏', icon: 'üèãÔ∏è' },
    { id: 'barbell', name: '–®—Ç–∞–Ω–≥–∞', icon: 'üèãÔ∏è‚Äç‚ôÇÔ∏è' },
    { id: 'kettlebell', name: '–ì–∏—Ä—è', icon: 'üîî' },
    { id: 'resistance_bands', name: '–†–µ–∑–∏–Ω–∫–∏', icon: 'üéØ' },
    { id: 'pull_up_bar', name: '–¢—É—Ä–Ω–∏–∫', icon: 'üö™' },
    { id: 'none', name: '–ë–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', icon: 'ü§∏' }
  ];

  const handleProfileUpdate = (field: keyof UserProfile, value: any) => {
    setProfile(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleGoalToggle = (goalId: string) => {
    setProfile(prev => ({
      ...prev,
      goals: prev.goals.includes(goalId)
        ? prev.goals.filter(g => g !== goalId)
        : [...prev.goals, goalId]
    }));
  };

  const handleEquipmentToggle = (equipmentId: string) => {
    if (equipmentId === 'none') {
      setProfile(prev => ({
        ...prev,
        available_equipment: []
      }));
    } else {
      setProfile(prev => ({
        ...prev,
        available_equipment: prev.available_equipment?.includes(equipmentId)
          ? prev.available_equipment.filter(e => e !== equipmentId)
          : [...(prev.available_equipment || []), equipmentId]
      }));
    }
  };

  const handleGenerateWorkout = async () => {
    setLoading(true);
    
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      localStorage.setItem('user_profile', JSON.stringify(profile));
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ AI
      const workout = await aiService.generateWorkout(profile);
      setGeneratedWorkout(workout);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      aiService.saveWorkoutLocally(workout);
      
    } catch (error) {
      console.error('Error generating workout:', error);
      // Fallback –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const mockWorkout: Workout = {
        title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Å–µ —Ç–µ–ª–æ',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü',
        duration_minutes: profile.workout_duration,
        difficulty: profile.fitness_level,
        exercises: [
          {
            name: '–û—Ç–∂–∏–º–∞–Ω–∏—è',
            sets: 3,
            reps: '10-12',
            rest_seconds: 60,
            muscle_groups: ['–≥—Ä—É–¥—å', '–ø–ª–µ—á–∏', '—Ç—Ä–∏—Ü–µ–ø—Å'],
            notes: '–î–µ—Ä–∂–∏—Ç–µ –∫–æ—Ä–ø—É—Å –ø—Ä—è–º—ã–º',
            difficulty: 'medium'
          },
          {
            name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
            sets: 3,
            reps: '12-15',
            rest_seconds: 60,
            muscle_groups: ['–∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å', '—è–≥–æ–¥–∏—Ü—ã'],
            notes: '–ö–æ–ª–µ–Ω–∏ –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –Ω–æ—Å–∫–∏',
            difficulty: 'medium'
          },
          {
            name: '–ü–ª–∞–Ω–∫–∞',
            sets: 3,
            reps: '45 —Å–µ–∫',
            rest_seconds: 45,
            muscle_groups: ['–ø—Ä–µ—Å—Å', '–∫–æ—Ä'],
            notes: '–ù–µ –ø—Ä–æ–≥–∏–±–∞–π—Ç–µ —Å–ø–∏–Ω—É',
            difficulty: 'medium'
          }
        ],
        warmup: [
          { name: '–ö—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—É–∫–∞–º–∏', duration: '30 —Å–µ–∫' },
          { name: '–ú–∞—Ö–∏ –Ω–æ–≥–∞–º–∏', duration: '30 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é' }
        ],
        cooldown: [
          { name: '–†–∞—Å—Ç—è–∂–∫–∞ –≥—Ä—É–¥–∏', duration: '30 —Å–µ–∫' },
          { name: '–†–∞—Å—Ç—è–∂–∫–∞ –Ω–æ–≥', duration: '30 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—É—é' }
        ],
        tips: [
          '–ü–µ–π—Ç–µ –≤–æ–¥—É –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          '–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏–∫–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
          '–û—Ç–¥—ã—Ö–∞–π—Ç–µ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏'
        ],
        calories_burned: 250
      };
      setGeneratedWorkout(mockWorkout);
      aiService.saveWorkoutLocally(mockWorkout);
    } finally {
      setLoading(false);
    }
  };

  const handleStartWorkout = () => {
    if (generatedWorkout) {
      navigate('/workout/generated', { state: { workout: generatedWorkout } });
    }
  };

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <Card>
            <CardHeader>
              <CardTitle>üìä –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">
                  –í–æ–∑—Ä–∞—Å—Ç
                </label>
                <input
                  type="number"
                  value={profile.age}
                  onChange={(e) => handleProfileUpdate('age', parseInt(e.target.value))}
                  className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white"
                  placeholder="25"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    –í–µ—Å (–∫–≥)
                  </label>
                  <input
                    type="number"
                    value={profile.weight}
                    onChange={(e) => handleProfileUpdate('weight', parseFloat(e.target.value))}
                    className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white"
                    placeholder="70"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    –†–æ—Å—Ç (—Å–º)
                  </label>
                  <input
                    type="number"
                    value={profile.height}
                    onChange={(e) => handleProfileUpdate('height', parseFloat(e.target.value))}
                    className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white"
                    placeholder="175"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-3">
                  –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
                </label>
                <div className="space-y-2">
                  {fitnessLevels.map((level) => (
                    <button
                      key={level.id}
                      onClick={() => handleProfileUpdate('fitness_level', level.id as any)}
                      className={`w-full p-3 rounded-lg border-2 transition-all ${
                        profile.fitness_level === level.id
                          ? 'border-indigo-500 bg-indigo-500/10'
                          : 'border-gray-700 bg-gray-800 hover:border-gray-600'
                      }`}
                    >
                      <div className="flex items-center space-x-3">
                        <span className="text-xl">{level.icon}</span>
                        <span className="font-medium text-white">{level.name}</span>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
              
              <Button
                onClick={() => setStep(2)}
                className="w-full"
                size="lg"
                variant="primary"
              >
                –î–∞–ª–µ–µ ‚Üí
              </Button>
            </CardContent>
          </Card>
        );
        
      case 2:
        return (
          <Card>
            <CardHeader>
              <CardTitle>üéØ –¶–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-3">
                {goals.map((goal) => (
                  <button
                    key={goal.id}
                    onClick={() => handleGoalToggle(goal.id)}
                    className={`p-4 rounded-xl transition-all duration-200 ${
                      profile.goals.includes(goal.id)
                        ? 'bg-indigo-500 shadow-lg shadow-indigo-500/25'
                        : 'bg-gray-800 hover:bg-gray-700'
                    }`}
                  >
                    <div className="text-center">
                      <div className="text-2xl mb-2">{goal.icon}</div>
                      <div className="text-sm font-medium text-white">{goal.name}</div>
                    </div>
                  </button>
                ))}
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">
                  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–∏–Ω—É—Ç)
                </label>
                <input
                  type="range"
                  min="15"
                  max="90"
                  step="5"
                  value={profile.workout_duration}
                  onChange={(e) => handleProfileUpdate('workout_duration', parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="text-center text-white mt-2">{profile.workout_duration} –º–∏–Ω—É—Ç</div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-2">
                  –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é
                </label>
                <input
                  type="range"
                  min="1"
                  max="7"
                  value={profile.days_per_week}
                  onChange={(e) => handleProfileUpdate('days_per_week', parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="text-center text-white mt-2">{profile.days_per_week} –¥–Ω–µ–π</div>
              </div>
              
              <div className="flex space-x-2">
                <Button
                  onClick={() => setStep(1)}
                  className="flex-1"
                  variant="secondary"
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </Button>
                <Button
                  onClick={() => setStep(3)}
                  className="flex-1"
                  variant="primary"
                  disabled={profile.goals.length === 0}
                >
                  –î–∞–ª–µ–µ ‚Üí
                </Button>
              </div>
            </CardContent>
          </Card>
        );
        
      case 3:
        return (
          <Card>
            <CardHeader>
              <CardTitle>üèãÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-3">
                {equipment.map((item) => (
                  <button
                    key={item.id}
                    onClick={() => handleEquipmentToggle(item.id)}
                    className={`p-4 rounded-xl transition-all duration-200 ${
                      (item.id === 'none' && (!profile.available_equipment || profile.available_equipment.length === 0)) ||
                      (profile.available_equipment?.includes(item.id))
                        ? 'bg-indigo-500 shadow-lg shadow-indigo-500/25'
                        : 'bg-gray-800 hover:bg-gray-700'
                    }`}
                  >
                    <div className="text-center">
                      <div className="text-2xl mb-2">{item.icon}</div>
                      <div className="text-xs font-medium text-white">{item.name}</div>
                    </div>
                  </button>
                ))}
              </div>
              
              <div className="flex space-x-2">
                <Button
                  onClick={() => setStep(2)}
                  className="flex-1"
                  variant="secondary"
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </Button>
                <Button
                  onClick={handleGenerateWorkout}
                  className="flex-1"
                  variant="primary"
                  disabled={loading}
                >
                  {loading ? (
                    <div className="flex items-center justify-center space-x-2">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                      <span>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...</span>
                    </div>
                  ) : (
                    'üéØ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>
        );
        
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-900 p-4 pb-20">
      <div className="max-w-md mx-auto space-y-6">
        {/* Header */}
        <div className="text-center pt-4 pb-6">
          <h1 className="text-2xl font-bold text-white mb-2">
            AI –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
          </h1>
          <p className="text-gray-400">
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
          </p>
          
          {/* Progress Steps */}
          <div className="flex justify-center space-x-2 mt-4">
            {[1, 2, 3].map((s) => (
              <div
                key={s}
                className={`w-8 h-1 rounded-full transition-all ${
                  s <= step ? 'bg-indigo-500' : 'bg-gray-700'
                }`}
              />
            ))}
          </div>
        </div>

        {/* Current Step */}
        {!generatedWorkout && renderStep()}

        {/* Generated Workout */}
        {generatedWorkout && (
          <Card className="slide-up">
            <CardHeader>
              <CardTitle>‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="bg-gray-800 rounded-xl p-4">
                <h3 className="font-semibold text-white mb-2">{generatedWorkout.title}</h3>
                <p className="text-sm text-gray-400 mb-3">{generatedWorkout.description}</p>
                <div className="flex justify-between text-sm">
                  <div className="text-gray-400">
                    <span className="text-indigo-400">‚è±Ô∏è</span> {generatedWorkout.duration_minutes} –º–∏–Ω
                  </div>
                  <div className="text-gray-400">
                    <span className="text-orange-400">üî•</span> {generatedWorkout.calories_burned} –∫–∫–∞–ª
                  </div>
                  <div className="text-gray-400">
                    <span className="text-green-400">üí™</span> {generatedWorkout.exercises.length} —É–ø—Ä.
                  </div>
                </div>
              </div>

              {/* Warmup */}
              <div>
                <h4 className="font-medium text-white mb-2">üî• –†–∞–∑–º–∏–Ω–∫–∞</h4>
                <div className="bg-gray-800 rounded-lg p-3 space-y-2">
                  {generatedWorkout.warmup.map((item, index) => (
                    <div key={index} className="flex justify-between text-sm">
                      <span className="text-gray-300">{item.name}</span>
                      <span className="text-gray-500">{item.duration}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Exercises */}
              <div>
                <h4 className="font-medium text-white mb-2">üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</h4>
                <div className="space-y-2">
                  {generatedWorkout.exercises.map((exercise, index) => (
                    <div key={index} className="bg-gray-800 rounded-lg p-3">
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex-1">
                          <div className="font-medium text-white">{exercise.name}</div>
                          <div className="text-xs text-gray-400">
                            {exercise.muscle_groups.join(', ')}
                          </div>
                        </div>
                        <div className="text-right text-sm">
                          <div className="text-indigo-400">
                            {exercise.sets} √ó {exercise.reps}
                          </div>
                          <div className="text-gray-500 text-xs">
                            –û—Ç–¥—ã—Ö: {exercise.rest_seconds}—Å
                          </div>
                        </div>
                      </div>
                      {exercise.notes && (
                        <div className="text-xs text-gray-500 italic">
                          üí° {exercise.notes}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {/* Tips */}
              <div>
                <h4 className="font-medium text-white mb-2">üí° –°–æ–≤–µ—Ç—ã</h4>
                <div className="bg-gray-800 rounded-lg p-3 space-y-1">
                  {generatedWorkout.tips.map((tip, index) => (
                    <div key={index} className="text-sm text-gray-400">
                      ‚Ä¢ {tip}
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex space-x-2">
                <Button
                  onClick={() => {
                    setGeneratedWorkout(null);
                    setStep(1);
                  }}
                  className="flex-1"
                  variant="secondary"
                >
                  üîÑ –ù–æ–≤–∞—è
                </Button>
                <Button
                  onClick={handleStartWorkout}
                  className="flex-1"
                  variant="success"
                >
                  üèãÔ∏è –ù–∞—á–∞—Ç—å
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
};