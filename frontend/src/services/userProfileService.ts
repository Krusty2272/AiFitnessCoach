export interface UserProfile {
  id: string;
  nickname: string;
  avatar: string;
  avatarCategory: string;
  bio?: string;
  createdAt: string;
  updatedAt: string;
}

export interface AvatarOption {
  emoji: string;
  category: string;
  name: string;
  requiredLevel?: number;
  theme?: {
    primary: string;
    secondary: string;
    background: string;
    accent: string;
    name: string;
  };
}

class UserProfileService {
  private profile: UserProfile | null = null;

  // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  private readonly avatarLibrary: Record<string, AvatarOption[]> = {
    sport: [
      { emoji: 'üí™', category: 'sport', name: '–°–∏–ª—å–Ω—ã–π' },
      { emoji: 'üèÉ', category: 'sport', name: '–ë–µ–≥—É–Ω' },
      { emoji: 'üèãÔ∏è', category: 'sport', name: '–¢—è–∂–µ–ª–æ–∞—Ç–ª–µ—Ç' },
      { emoji: 'ü§∏', category: 'sport', name: '–ì–∏–º–Ω–∞—Å—Ç' },
      { emoji: 'üö¥', category: 'sport', name: '–í–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç' },
      { emoji: 'üèä', category: 'sport', name: '–ü–ª–æ–≤–µ—Ü' },
      { emoji: 'üßò', category: 'sport', name: '–ô–æ–≥' },
      { emoji: 'ü§æ', category: 'sport', name: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω' },
      { emoji: '‚õπÔ∏è', category: 'sport', name: '–ë–∞—Å–∫–µ—Ç–±–æ–ª–∏—Å—Ç' },
      { emoji: 'üèåÔ∏è', category: 'sport', name: '–ì–æ–ª—å—Ñ–∏—Å—Ç' }
    ],
    people: [
      { emoji: 'üòé', category: 'people', name: '–ö—Ä—É—Ç–æ–π' },
      { emoji: 'ü•∑', category: 'people', name: '–ù–∏–Ω–¥–∑—è' },
      { emoji: 'üë®‚Äçüé§', category: 'people', name: '–†–æ–∫–µ—Ä' },
      { emoji: 'üßë‚Äçüíª', category: 'people', name: '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' },
      { emoji: 'üë®‚ÄçüöÄ', category: 'people', name: '–ê—Å—Ç—Ä–æ–Ω–∞–≤—Ç' },
      { emoji: 'ü¶∏', category: 'people', name: '–°—É–ø–µ—Ä–≥–µ—Ä–æ–π' },
      { emoji: 'üßô', category: 'people', name: '–í–æ–ª—à–µ–±–Ω–∏–∫' },
      { emoji: 'üëë', category: 'people', name: '–ö–æ—Ä–æ–ª—å' },
      { emoji: 'üéÖ', category: 'people', name: '–°–∞–Ω—Ç–∞' },
      { emoji: 'üßõ', category: 'people', name: '–í–∞–º–ø–∏—Ä' }
    ],
    animals: [
      { emoji: 'ü¶Å', category: 'animals', name: '–õ–µ–≤' },
      { emoji: 'üê∫', category: 'animals', name: '–í–æ–ª–∫' },
      { emoji: 'ü¶Ö', category: 'animals', name: '–û—Ä—ë–ª' },
      { emoji: 'üêâ', category: 'animals', name: '–î—Ä–∞–∫–æ–Ω' },
      { emoji: 'ü¶à', category: 'animals', name: '–ê–∫—É–ª–∞' },
      { emoji: 'üêÖ', category: 'animals', name: '–¢–∏–≥—Ä' },
      { emoji: 'ü¶ç', category: 'animals', name: '–ì–æ—Ä–∏–ª–ª–∞' },
      { emoji: 'üêª', category: 'animals', name: '–ú–µ–¥–≤–µ–¥—å' },
      { emoji: 'ü¶ä', category: 'animals', name: '–õ–∏—Å–∞' },
      { emoji: 'ü¶ù', category: 'animals', name: '–ï–Ω–æ—Ç' }
    ],
    fun: [
      { emoji: 'üéØ', category: 'fun', name: '–¶–µ–ª—å' },
      { emoji: 'üöÄ', category: 'fun', name: '–†–∞–∫–µ—Ç–∞' },
      { emoji: '‚ö°', category: 'fun', name: '–ú–æ–ª–Ω–∏—è' },
      { emoji: 'üî•', category: 'fun', name: '–û–≥–æ–Ω—å' },
      { emoji: 'üíé', category: 'fun', name: '–ê–ª–º–∞–∑' },
      { emoji: 'üåü', category: 'fun', name: '–ó–≤–µ–∑–¥–∞' },
      { emoji: 'üéÆ', category: 'fun', name: '–ì–µ–π–º–µ—Ä' },
      { emoji: 'üé∏', category: 'fun', name: '–ì–∏—Ç–∞—Ä–∞' },
      { emoji: 'üé®', category: 'fun', name: '–•—É–¥–æ–∂–Ω–∏–∫' },
      { emoji: 'üé≠', category: 'fun', name: '–¢–µ–∞—Ç—Ä' }
    ],
    nature: [
      { emoji: 'üåà', category: 'nature', name: '–†–∞–¥—É–≥–∞' },
      { emoji: 'üå∏', category: 'nature', name: '–°–∞–∫—É—Ä–∞' },
      { emoji: 'üå∫', category: 'nature', name: '–ì–∏–±–∏—Å–∫—É—Å' },
      { emoji: 'üåª', category: 'nature', name: '–ü–æ–¥—Å–æ–ª–Ω—É—Ö' },
      { emoji: 'üå¥', category: 'nature', name: '–ü–∞–ª—å–º–∞' },
      { emoji: 'üåµ', category: 'nature', name: '–ö–∞–∫—Ç—É—Å' },
      { emoji: 'üçÑ', category: 'nature', name: '–ì—Ä–∏–±' },
      { emoji: 'üåô', category: 'nature', name: '–õ—É–Ω–∞' },
      { emoji: '‚òÄÔ∏è', category: 'nature', name: '–°–æ–ª–Ω—Ü–µ' },
      { emoji: '‚≠ê', category: 'nature', name: '–ó–≤–µ–∑–¥–∞' }
    ],
    food: [
      { emoji: 'üçï', category: 'food', name: '–ü–∏—Ü—Ü–∞' },
      { emoji: 'üçî', category: 'food', name: '–ë—É—Ä–≥–µ—Ä' },
      { emoji: 'ü•ë', category: 'food', name: '–ê–≤–æ–∫–∞–¥–æ' },
      { emoji: 'üçé', category: 'food', name: '–Ø–±–ª–æ–∫–æ' },
      { emoji: 'ü•¶', category: 'food', name: '–ë—Ä–æ–∫–∫–æ–ª–∏' },
      { emoji: 'ü•ï', category: 'food', name: '–ú–æ—Ä–∫–æ–≤—å' },
      { emoji: 'üçì', category: 'food', name: '–ö–ª—É–±–Ω–∏–∫–∞' },
      { emoji: 'üçâ', category: 'food', name: '–ê—Ä–±—É–∑' },
      { emoji: 'ü••', category: 'food', name: '–ö–æ–∫–æ—Å' },
      { emoji: 'üçã', category: 'food', name: '–õ–∏–º–æ–Ω' }
    ],
    emoji: [
      { emoji: 'üòà', category: 'emoji', name: '–î—å—è–≤–æ–ª' },
      { emoji: 'üëª', category: 'emoji', name: '–ü—Ä–∏–∑—Ä–∞–∫' },
      { emoji: 'üëΩ', category: 'emoji', name: '–ü—Ä–∏—à–µ–ª–µ—Ü' },
      { emoji: 'ü§ñ', category: 'emoji', name: '–†–æ–±–æ—Ç' },
      { emoji: 'üíÄ', category: 'emoji', name: '–ß–µ—Ä–µ–ø' },
      { emoji: 'üéÉ', category: 'emoji', name: '–¢—ã–∫–≤–∞' },
      { emoji: 'ü§°', category: 'emoji', name: '–ö–ª–æ—É–Ω' },
      { emoji: 'üëπ', category: 'emoji', name: '–û–≥—Ä' },
      { emoji: 'üë∫', category: 'emoji', name: '–ì–æ–±–ª–∏–Ω' },
      { emoji: 'üóø', category: 'emoji', name: '–ú–æ–∞–∏' }
    ],
    premium: [
      { 
        emoji: '‚≠ê', 
        category: 'premium', 
        name: 'Star', 
        requiredLevel: 10,
        theme: {
          primary: '#ffd700',
          secondary: '#ffed4e',
          background: '#1a1a2e',
          accent: '#ffa500',
          name: 'golden-star'
        }
      },
      { 
        emoji: '‚ö°', 
        category: 'premium', 
        name: 'Lightning', 
        requiredLevel: 15,
        theme: {
          primary: '#00d4ff',
          secondary: '#0099cc',
          background: '#0f0f1e',
          accent: '#00ffff',
          name: 'electric-blue'
        }
      },
      { 
        emoji: 'üíé', 
        category: 'premium', 
        name: 'Diamond', 
        requiredLevel: 20,
        theme: {
          primary: '#b9f2ff',
          secondary: '#00d4ff',
          background: '#0a0e27',
          accent: '#00ffff',
          name: 'diamond-ice'
        }
      },
      { 
        emoji: 'üëë', 
        category: 'premium', 
        name: 'Crown', 
        requiredLevel: 25,
        theme: {
          primary: '#ffd700',
          secondary: '#daa520',
          background: '#1a0f0a',
          accent: '#ff6b35',
          name: 'royal-gold'
        }
      },
      { 
        emoji: 'üèÜ', 
        category: 'premium', 
        name: 'Champion', 
        requiredLevel: 30,
        theme: {
          primary: '#ff6b35',
          secondary: '#ff9558',
          background: '#1a0e0e',
          accent: '#ffd700',
          name: 'champion-bronze'
        }
      },
      { 
        emoji: 'üî•', 
        category: 'premium', 
        name: 'Phoenix', 
        requiredLevel: 40,
        theme: {
          primary: '#ff4500',
          secondary: '#ff6347',
          background: '#1a0a0a',
          accent: '#ffd700',
          name: 'phoenix-flame'
        }
      },
      { 
        emoji: 'üåå', 
        category: 'premium', 
        name: 'Galaxy', 
        requiredLevel: 50,
        theme: {
          primary: '#9945ff',
          secondary: '#ff00ff',
          background: '#0a0015',
          accent: '#00ffff',
          name: 'cosmic-galaxy'
        }
      },
      { 
        emoji: '‚ú®', 
        category: 'premium', 
        name: 'Legendary', 
        requiredLevel: 75,
        theme: {
          primary: '#ff00ff',
          secondary: '#00ffff',
          background: '#000000',
          accent: '#ffd700',
          name: 'legendary-prism'
        }
      },
      { 
        emoji: 'üåà', 
        category: 'premium', 
        name: 'Mythic', 
        requiredLevel: 100,
        theme: {
          primary: 'linear-gradient(45deg, #ff0000, #ff7f00, #ffff00, #00ff00, #0000ff, #8b00ff)',
          secondary: 'linear-gradient(45deg, #8b00ff, #0000ff, #00ff00, #ffff00, #ff7f00, #ff0000)',
          background: '#0a0a0a',
          accent: '#ffffff',
          name: 'mythic-rainbow'
        }
      }
    ]
  };

  constructor() {
    this.loadProfile();
  }

  private loadProfile() {
    const saved = localStorage.getItem('userProfile');
    if (saved) {
      this.profile = JSON.parse(saved);
    } else {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      this.profile = {
        id: `user_${Date.now()}`,
        nickname: '–°–ø–æ—Ä—Ç—Å–º–µ–Ω',
        avatar: 'üí™',
        avatarCategory: 'sport',
        bio: '',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      this.saveProfile();
    }
  }

  private saveProfile() {
    if (this.profile) {
      localStorage.setItem('userProfile', JSON.stringify(this.profile));
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
  getProfile(): UserProfile {
    if (!this.profile) {
      this.loadProfile();
    }
    return this.profile!;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º
  updateNickname(nickname: string): boolean {
    if (!nickname || nickname.trim().length < 2 || nickname.trim().length > 20) {
      return false;
    }

    if (this.profile) {
      this.profile.nickname = nickname.trim();
      this.profile.updatedAt = new Date().toISOString();
      this.saveProfile();
      return true;
    }
    return false;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
  updateAvatar(avatar: string, category: string): boolean {
    if (this.profile) {
      this.profile.avatar = avatar;
      this.profile.avatarCategory = category;
      this.profile.updatedAt = new Date().toISOString();
      this.saveProfile();
      
      // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∞–≤–∞—Ç–∞—Ä–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞
      const autoTheme = localStorage.getItem('autoAvatarTheme');
      if (autoTheme === 'true') {
        const avatarOption = this.findAvatarByEmoji(avatar);
        if (avatarOption?.theme) {
          this.applyAvatarTheme(avatarOption.theme);
        }
      }
      
      return true;
    }
    return false;
  }
  
  // –ù–∞–π—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ —ç–º–æ–¥–∑–∏
  findAvatarByEmoji(emoji: string): AvatarOption | undefined {
    for (const category of Object.values(this.avatarLibrary)) {
      const avatar = category.find(a => a.emoji === emoji);
      if (avatar) return avatar;
    }
    return undefined;
  }
  
  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∞–≤–∞—Ç–∞—Ä–∫–∏
  applyAvatarTheme(theme: AvatarOption['theme']) {
    if (!theme) return;
    
    const root = document.documentElement;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –∫–∞–∫ —Ç–µ–º—É –∞–≤–∞—Ç–∞—Ä–∫–∏
    localStorage.setItem('avatarTheme', JSON.stringify(theme));
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if (theme.primary.includes('gradient')) {
      root.style.setProperty('--primary-gradient', theme.primary);
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ü–≤–µ—Ç –∏–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –¥–ª—è primary-color
      const firstColor = theme.primary.match(/#[a-fA-F0-9]{6}/)?.[0] || '#667eea';
      root.style.setProperty('--primary-color', firstColor);
    } else {
      root.style.setProperty('--primary-gradient', `linear-gradient(135deg, ${theme.primary}, ${theme.secondary})`);
      root.style.setProperty('--primary-color', theme.primary);
    }
    
    if (theme.secondary.includes('gradient')) {
      const firstColor = theme.secondary.match(/#[a-fA-F0-9]{6}/)?.[0] || '#764ba2';
      root.style.setProperty('--secondary-color', firstColor);
    } else {
      root.style.setProperty('--secondary-color', theme.secondary);
    }
    
    root.style.setProperty('--background-primary', theme.background);
    root.style.setProperty('--accent-color', theme.accent);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
    const isDark = this.isColorDark(theme.background);
    root.style.setProperty('--text-primary', isDark ? '#ffffff' : '#000000');
    root.style.setProperty('--text-secondary', isDark ? 'rgba(255,255,255,0.7)' : 'rgba(0,0,0,0.7)');
    root.style.setProperty('--background-secondary', isDark ? '#1a1a2e' : '#f5f5f5');
    root.style.setProperty('--background-card', isDark ? 'rgba(255,255,255,0.05)' : 'rgba(0,0,0,0.05)');
    root.style.setProperty('--border-color', isDark ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Ç–µ–º–Ω—ã–π –ª–∏ —Ü–≤–µ—Ç
  isColorDark(color: string): boolean {
    // –£–±–∏—Ä–∞–µ–º # –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ hex —á–∞—Å—Ç—å
    const hex = color.replace('#', '').substring(0, 6);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å hex
    if (!/^[0-9A-Fa-f]{6}$/.test(hex)) {
      return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ç–µ–º–Ω—ã–º
    }
    
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    const brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    return brightness < 128;
  }
  
  // –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–º—É –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
  resetTheme() {
    localStorage.removeItem('avatarTheme');
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∏–∑ ThemeContext
    const savedTheme = localStorage.getItem('theme') || 'dark';
    const event = new CustomEvent('themeReset', { detail: savedTheme });
    window.dispatchEvent(event);
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –±–∏–æ
  updateBio(bio: string): boolean {
    if (bio.length > 150) {
      return false;
    }

    if (this.profile) {
      this.profile.bio = bio;
      this.profile.updatedAt = new Date().toISOString();
      this.saveProfile();
      return true;
    }
    return false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
  getAllAvatars(): Record<string, AvatarOption[]> {
    return this.avatarLibrary;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getAvatarsByCategory(category: string): AvatarOption[] {
    return this.avatarLibrary[category] || [];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫
  getAvatarCategories(): { id: string; name: string; icon: string }[] {
    return [
      { id: 'sport', name: '–°–ø–æ—Ä—Ç', icon: 'üí™' },
      { id: 'people', name: '–õ—é–¥–∏', icon: 'üòé' },
      { id: 'animals', name: '–ñ–∏–≤–æ—Ç–Ω—ã–µ', icon: 'ü¶Å' },
      { id: 'fun', name: '–í–µ—Å–µ–ª—å–µ', icon: 'üéØ' },
      { id: 'nature', name: '–ü—Ä–∏—Ä–æ–¥–∞', icon: 'üåà' },
      { id: 'food', name: '–ï–¥–∞', icon: 'üçï' },
      { id: 'emoji', name: '–≠–º–æ–¥–∑–∏', icon: 'üòà' },
      { id: 'premium', name: '–ü—Ä–µ–º–∏—É–º', icon: 'üëë' }
    ];
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
  isAvatarUnlocked(avatar: AvatarOption): boolean {
    if (!avatar.requiredLevel) return true;
    
    const levelData = JSON.parse(localStorage.getItem('levelData') || '{}');
    return levelData.currentLevel >= avatar.requiredLevel;
  }
  
  // –ü–æ–ª—É—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–µ–º–∏—É–º –∞–≤–∞—Ç–∞—Ä–æ–∫
  getMinPremiumLevel(): number {
    return Math.min(...this.avatarLibrary.premium.map(a => a.requiredLevel || 0));
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  isPremiumUnlocked(): boolean {
    const levelData = JSON.parse(localStorage.getItem('levelData') || '{}');
    return levelData.currentLevel >= this.getMinPremiumLevel();
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
  validateNickname(nickname: string): { valid: boolean; error?: string } {
    if (!nickname || nickname.trim().length === 0) {
      return { valid: false, error: '–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
    }
    if (nickname.trim().length < 2) {
      return { valid: false, error: '–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω. 2 —Å–∏–º–≤–æ–ª–∞)' };
    }
    if (nickname.trim().length > 20) {
      return { valid: false, error: '–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 20 —Å–∏–º–≤–æ–ª–æ–≤)' };
    }
    if (!/^[a-zA-Z–∞-—è–ê-–Ø0-9_\s]+$/.test(nickname)) {
      return { valid: false, error: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _' };
    }
    return { valid: true };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
  generateRandomNickname(): string {
    const adjectives = ['–°–∏–ª—å–Ω—ã–π', '–ë—ã—Å—Ç—Ä—ã–π', '–£–º–Ω—ã–π', '–•—Ä–∞–±—Ä—ã–π', '–õ–æ–≤–∫–∏–π', '–ú–æ–≥—É—á–∏–π', '–ñ–µ–ª–µ–∑–Ω—ã–π', '–°—Ç–∞–ª—å–Ω–æ–π'];
    const nouns = ['–í–æ–∏–Ω', '–ê—Ç–ª–µ—Ç', '–ß–µ–º–ø–∏–æ–Ω', '–ë–æ–µ—Ü', '–°–ø–æ—Ä—Ç—Å–º–µ–Ω', '–ì–µ—Ä–æ–π', '–¢–∏—Ç–∞–Ω', '–í–∏–∫–∏–Ω–≥'];
    const number = Math.floor(Math.random() * 999);
    
    const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
    const noun = nouns[Math.floor(Math.random() * nouns.length)];
    
    return `${adj}${noun}${number}`;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
  getRandomAvatar(): AvatarOption {
    const categories = Object.keys(this.avatarLibrary).filter(cat => cat !== 'premium' || this.isPremiumUnlocked());
    const randomCategory = categories[Math.floor(Math.random() * categories.length)];
    const avatars = this.avatarLibrary[randomCategory];
    return avatars[Math.floor(Math.random() * avatars.length)];
  }
}

export default new UserProfileService();